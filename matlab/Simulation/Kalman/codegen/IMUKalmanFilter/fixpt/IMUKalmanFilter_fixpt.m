%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%           Generated by MATLAB 9.0 and Fixed-Point Designer 5.2           %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [Theta, dTheta, Bias, P] = IMUKalmanFilter_fixpt(Theta_1, dTheta_1, Bias_1, P_1, Gyro, AccTheta, qw, qb, rw, rt)
    fm = get_fimath();
    Bias = fi(Bias_1, 1, 16, 2, fm);
    P = fi(P_1, 1, 32, 4, fm);
    Theta = fi(Theta_1, 1, 16, 0, fm);
    dTheta = fi(dTheta_1, 1, 16, 0, fm);

    [fmo_1, fmo_2, fmo_3, fmo_4] = TimeUpdate(Theta, dTheta, Bias, P, qw, qb);
    Theta = fi(fmo_1, 1, 16, 0, fm);
    dTheta = fi(fmo_2, 1, 16, 0, fm);
    Bias = fi(fmo_3, 1, 16, 2, fm);
    P = fi(fmo_4, 1, 32, 4, fm);
    [Theta(:), dTheta(:), Bias(:), P(:)] = GyroCorrection(Theta, dTheta, Bias, P, Gyro, rw);
    [Theta(:), dTheta(:), Bias(:), P(:)] = AccCorrection(Theta, dTheta, Bias, P, AccTheta, rt);
end

function [Theta, dTheta, Bias, P] = TimeUpdate(Theta_p, dTheta_p, Bias_p, P_p, qw, qb)
    fm = get_fimath();

    global T;
    
    % State Update
    dTheta = fi(dTheta_p, 1, 16, 4, fm);
    Theta  = fi(T*dTheta_p + Theta_p, 1, 16, 4, fm);
    Bias = fi(Bias_p, 1, 16, 9, fm);
    
    % Covariance Update
    Pbb_p = fi(P_p(3,3), 0, 16, 13, fm);
    Ptb_p = fi(P_p(2,3), 1, 16, 9, fm);
    Ptt_p = fi(P_p(2,2), 0, 16, 6, fm);
    Pwb_p = fi(P_p(1,3), 1, 16, 12, fm);
    Pwt_p = fi(P_p(1,2), 0, 16, 10, fm);
    Pww_p = fi(P_p(1,1), 0, 16, 13, fm);
    
    Pbb = fi(Pbb_p + T*qb, 0, 16, 13, fm);
    Ptb = fi(T*Pwb_p+Ptb_p, 1, 16, 9, fm);
    Ptt = fi(Ptt_p + T^2*Pww_p + fi(2*T, 0, 16, 22, fm)*Pwt_p + T^3*qw*fi(1/3, 0, 16, 17, fm), 0, 16, 6, fm);
    Pwb = fi(Pwb_p, 1, 16, 12, fm);
    Pwt = fi(T*Pww_p + Pwt_p + fi(1/2*T^2, 0, 16, 32, fm)*qw, 0, 16, 10, fm);
    Pww = fi(Pww_p + T*qw, 0, 16, 13, fm);
    
    P = fi([fi(Pww, 1, 16, 5, fm), Pwt, Pwb; fi(Pwt, 1, 16, 5, fm), Ptt, Ptb; fi(Pwb, 1, 16, 9, fm), Ptb, Pbb], 1, 16, 5, fm);
end

function [Theta, dTheta, Bias, P] = GyroCorrection(Theta_p, dTheta_p, Bias_p, P_p, yw, rw)
    fm = get_fimath();

    global T;
    Pbb_p = fi(P_p(3,3), 0, 16, 13, fm);
    Ptb_p = fi(P_p(2,3), 1, 16, 9, fm);
    Ptt_p = fi(P_p(2,2), 0, 16, 6, fm);
    Pwb_p = fi(P_p(1,3), 1, 16, 12, fm);
    Pwt_p = fi(P_p(1,2), 0, 16, 10, fm);
    Pww_p = fi(P_p(1,1), 0, 16, 13, fm);    

    %% Kalman Gain Update
    kw = fi(fi_div((Pww_p + Pwb_p), (Pww_p + fi(2, 0, 8, 0, fm)*Pwb_p + Pbb_p + fi_div(rw, T))), 0, 16, 16, fm);
    kt = fi(fi_div((Pwt_p + Ptb_p), (Pww_p + fi(2, 0, 8, 0, fm)*Pwb_p + Pbb_p + fi_div(rw, T))), 1, 16, 16, fm);
    kb = fi(fi_div((Pwb_p + Pbb_p), (Pww_p + fi(2, 0, 8, 0, fm)*Pwb_p + Pbb_p + fi_div(rw, T))), 0, 16, 20, fm);
    
    %% State Update
    dTheta = fi(dTheta_p + kw*(yw-dTheta_p-Bias_p), 1, 16, 4, fm);
    Theta =  fi(Theta_p  + kt*(yw-dTheta_p-Bias_p), 1, 16, 4, fm);
    Bias =   fi(Bias_p + kb*(yw-dTheta_p-Bias_p), 1, 16, 9, fm);
    
    %% Covariance Update
    Pww = fi((fi_signed(kw) - fi(1, 0, 8, 0, fm))^2*Pww_p + (fi(2, 0, 8, 0, fm)*kw*(fi_signed(kw) - fi(1, 0, 8, 0, fm)))*Pwb_p + kw^2*Pbb_p + fi_div((kw^2*rw), T), 0, 16, 13, fm);
    Pwt = fi((kt*(fi_signed(kw) - fi(1, 0, 8, 0, fm)))*Pww_p + (fi(1, 0, 8, 0, fm) - kw)*Pwt_p + (kt*kw + kt*(fi_signed(kw) - fi(1, 0, 8, 0, fm)))*Pwb_p + (fi_uminus(kw))*Ptb_p + (kt*kw)*Pbb_p + fi_div((kt*kw*rw), T), 0, 16, 10, fm);
    Pwb = fi((kb*(fi_signed(kw) - fi(1, 0, 8, 0, fm)))*Pww_p + (kb*kw + (fi_signed(kb) - fi(1, 0, 8, 0, fm))*(fi_signed(kw) - fi(1, 0, 8, 0, fm)))*Pwb_p + (kw*(fi_signed(kb) - fi(1, 0, 8, 0, fm)))*Pbb_p + fi_div((kb*kw*rw), T), 1, 16, 12, fm);
    Ptt = fi(kt^2*Pww_p + (fi(-2, 1, 8, 0, fm)*kt)*Pwt_p + (fi(2, 0, 8, 0, fm)*kt^2)*Pwb_p + Ptt_p + (fi(-2, 1, 8, 0, fm)*kt)*Ptb_p + kt^2*Pbb_p + fi_div((kt^2*rw), T), 0, 16, 6, fm);
    Ptb = fi((kb*kt)*Pww_p + (fi_uminus(kb))*Pwt_p + (kb*kt + kt*(fi_signed(kb) - fi(1, 0, 8, 0, fm)))*Pwb_p + (fi(1, 0, 8, 0, fm) - kb)*Ptb_p + (kt*(fi_signed(kb) - fi(1, 0, 8, 0, fm)))*Pbb_p + fi_div((kb*kt*rw), T), 1, 16, 9, fm);
    Pbb = fi(kb^2*Pww_p + (fi(2, 0, 8, 0, fm)*kb*(fi_signed(kb) - fi(1, 0, 8, 0, fm)))*Pwb_p + (fi_signed(kb) - fi(1, 0, 8, 0, fm))^2*Pbb_p + fi_div((kb^2*rw), T), 0, 16, 13, fm);
    
    P = fi([fi(Pww, 1, 16, 5, fm), Pwt, Pwb; fi(Pwt, 1, 16, 5, fm), Ptt, Ptb; fi(Pwb, 1, 16, 9, fm), Ptb, Pbb], 1, 16, 5, fm);
end

function [Theta, dTheta, Bias, P] = AccCorrection(Theta_p, dTheta_p, Bias_p, P_p, yt, rt)
    fm = get_fimath();

    global T;
    Pbb_p = fi(P_p(3,3), 0, 16, 13, fm);
    Ptb_p = fi(P_p(2,3), 1, 16, 9, fm);
    Ptt_p = fi(P_p(2,2), 0, 16, 6, fm);
    Pwb_p = fi(P_p(1,3), 1, 16, 12, fm);
    Pwt_p = fi(P_p(1,2), 0, 16, 10, fm);
    Pww_p = fi(P_p(1,1), 0, 16, 13, fm);    

    %% Kalman Gain Update
    kw = fi(fi_div(Pwt_p, (Ptt_p + fi_div(rt, T))), 0, 16, 29, fm);
    kt = fi(fi_div(Ptt_p, (Ptt_p + fi_div(rt, T))), 0, 16, 26, fm);
    kb = fi(fi_div(Ptb_p, (Ptt_p + fi_div(rt, T))), 1, 16, 28, fm);
    
    %% State Update
    dTheta = fi(dTheta_p + kw*(yt-Theta_p), 1, 16, 4, fm);
    Theta =  fi(Theta_p  + kt*(yt-Theta_p), 1, 16, 4, fm);
    Bias =   fi(Bias_p   + kb*(yt-Theta_p), 1, 16, 9, fm);
    
    %% Covariance Update
    Pww = fi(Pww_p + (fi(-2, 1, 8, 0, fm)*kw)*Pwt_p + kw^2*Ptt_p + fi_div((kw^2*rt), T), 0, 16, 13, fm);
    Pwt = fi((fi(1, 0, 8, 0, fm) - kt)*Pwt_p + (kw*(fi_signed(kt) - fi(1, 0, 8, 0, fm)))*Ptt_p + fi_div((kt*kw*rt), T), 0, 16, 10, fm);
    Pwb = fi((fi_uminus(kb))*Pww_p + (kb*kw)*Pwt_p + (fi(1, 0, 8, 0, fm) - kb)*Pwb_p + (kw*(kb - fi(1, 0, 8, 0, fm)))*Ptb_p + fi_div((kb*kw*rt), T), 1, 16, 12, fm);
    Ptt = fi((fi_signed(kt) - fi(1, 0, 8, 0, fm))^2*Ptt_p + fi_div((kt^2*rt), T), 0, 16, 6, fm);
    Ptb = fi((kb*(fi_signed(kt) - fi(1, 0, 8, 0, fm)))*Pwt_p + ((kb - fi(1, 0, 8, 0, fm))*(fi_signed(kt) - fi(1, 0, 8, 0, fm)))*Ptb_p + fi_div((kb*kt*rt), T), 1, 16, 9, fm);
    Pbb = fi(kb^2*Pww_p + (fi(2, 0, 8, 0, fm)*kb*(kb - fi(1, 0, 8, 0, fm)))*Pwb_p + (kb - fi(1, 0, 8, 0, fm))^2*Pbb_p + fi_div((kb^2*rt), T), 0, 16, 13, fm);
    
    P = fi([fi(Pww, 1, 16, 5, fm), Pwt, Pwb; fi(Pwt, 1, 16, 5, fm), Ptt, Ptb; fi(Pwb, 1, 16, 9, fm), Ptb, Pbb], 1, 16, 5, fm);
end



function ntype = divideType(a,b)
    coder.inline( 'always' );
    nt1 = numerictype( a );
    nt2 = numerictype( b );
    maxFL = max( [ min( nt1.WordLength, nt1.FractionLength ), min( nt2.WordLength, nt2.FractionLength ) ] );
    FL = max( maxFL, 24 );
    extraBits = (FL - maxFL);
    WL = nt1.WordLength + nt2.WordLength;
    WL = min( WL, 124 );
    if (WL + extraBits)<64
        ntype = numerictype( nt1.Signed || nt2.Signed, WL + extraBits, FL );
    else
        ntype = numerictype( nt1.Signed || nt2.Signed, WL, FL );
    end
end


function c = fi_div(a,b)
    coder.inline( 'always' );
    if isfi( a ) && isfi( b ) && isscalar( b )
        a1 = fi( a, 'RoundMode', 'fix' );
        b1 = fi( b, 'RoundMode', 'fix' );
        c1 = divide( divideType( a1, b1 ), a1, b1 );
        c = fi( c1, numerictype( c1 ), fimath( a ) );
    else
        c = a/b;
    end
end


function y = fi_signed(a)
    coder.inline( 'always' );
    if isfi( a ) && ~(issigned( a ))
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = fi( a, new_nt, fimath( a ) );
    else
        y = a;
    end
end


function y = fi_uminus(a)
    coder.inline( 'always' );
    if isfi( a )
        nt = numerictype( a );
        new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
        y = -fi( a, new_nt, fimath( a ) );
    else
        y = -a;
    end
end

function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
